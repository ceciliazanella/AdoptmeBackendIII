openapi: 3.0.1
info:
  title: API de Usuarios
  version: 1.0.0
  description: Gestión de Usuarios en la Base de Datos.

tags:
  - name: Users
    description: Gestión de Usuarios.

paths:
  /users:
    get:
      summary: Obtiene a Todos los Usuarios Registrados en la Base de Datos.
      tags: [Users]
      responses:
        200:
          description: Lista de Usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: Error Interno del Servidor.

  /users/{uid}:
    get:
      summary: Obtiene un Usuario por su ID.
      tags: [Users]
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID de Mongo del Usuario a Obtener.
      responses:
        200:
          description: Usuario Encontrado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ID Inválido.
        404:
          description: Usuario no encontrado.
        500:
          description: Error Interno del Servidor.

    put:
      summary: Actualiza / Modifica los Datos de un Usuario por su ID.
      tags: [Users]
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID de Mongo del Usuario a Actualizar.
      requestBody:
        required: true
        description: Campos del Usuario a actualizar.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lili Artusa
                email:
                  type: string
                  format: email
                  example: lili@example.com
                age:
                  type: integer
                  example: 30
      responses:
        200:
          description: Usuario Actualizado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Datos Inválidos.
        404:
          description: Usuario no encontrado.
        500:
          description: Error Interno del Servidor.

    delete:
      summary: Elimina a un Usuario por su ID.
      tags: [Users]
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID de Mongo del Usuario a Eliminar.
      responses:
        200:
          description: Usuario Eliminado Correctamente.
        404:
          description: Usuario no encontrado.
        500:
          description: Error Interno del Servidor.

  /users/{uid}/documents:
    post:
      summary: Sube Documentos para un Usuario Específico.
      tags: [Users]
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID de Mongo del Usuario.
      requestBody:
        required: true
        description: Archivos a subir.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Documentos Subidos y Usuario Actualizado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Documentos Subidos y Usuario Actualizado.
                  documents:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: documento1.pdf
                        path:
                          type: string
                          example: /img/documento1.pdf
        400:
          description: No se Recibieron Archivos para Subir.
        500:
          description: Error Interno del Servidor.

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 60f7cbbd5311234567890abc
        name:
          type: string
          example: Lili Artusa
        email:
          type: string
          format: email
          example: lili@example.com
        age:
          type: integer
          example: 30
        documents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: documento1.pdf
              path:
                type: string
                example: /img/documento1.pdf
